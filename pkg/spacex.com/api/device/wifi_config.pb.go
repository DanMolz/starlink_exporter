// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spacex/api/device/wifi_config.proto

package device

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MeshAuth int32

const (
	MeshAuth_MESH_AUTH_UNKNOWN   MeshAuth = 0
	MeshAuth_MESH_AUTH_NEW       MeshAuth = 1
	MeshAuth_MESH_AUTH_TRUSTED   MeshAuth = 2
	MeshAuth_MESH_AUTH_UNTRUSTED MeshAuth = 3
)

var MeshAuth_name = map[int32]string{
	0: "MESH_AUTH_UNKNOWN",
	1: "MESH_AUTH_NEW",
	2: "MESH_AUTH_TRUSTED",
	3: "MESH_AUTH_UNTRUSTED",
}

var MeshAuth_value = map[string]int32{
	"MESH_AUTH_UNKNOWN":   0,
	"MESH_AUTH_NEW":       1,
	"MESH_AUTH_TRUSTED":   2,
	"MESH_AUTH_UNTRUSTED": 3,
}

func (x MeshAuth) String() string {
	return proto.EnumName(MeshAuth_name, int32(x))
}

func (MeshAuth) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{0}
}

type WifiConfig_Security int32

const (
	WifiConfig_UNKNOWN  WifiConfig_Security = 0
	WifiConfig_WPA2     WifiConfig_Security = 1
	WifiConfig_WPA3     WifiConfig_Security = 2
	WifiConfig_WPA2WPA3 WifiConfig_Security = 3
)

var WifiConfig_Security_name = map[int32]string{
	0: "UNKNOWN",
	1: "WPA2",
	2: "WPA3",
	3: "WPA2WPA3",
}

var WifiConfig_Security_value = map[string]int32{
	"UNKNOWN":  0,
	"WPA2":     1,
	"WPA3":     2,
	"WPA2WPA3": 3,
}

func (x WifiConfig_Security) String() string {
	return proto.EnumName(WifiConfig_Security_name, int32(x))
}

func (WifiConfig_Security) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{1, 0}
}

type WifiConfig_Band int32

const (
	WifiConfig_RF_UNKNOWN WifiConfig_Band = 0
	WifiConfig_RF_2GHZ    WifiConfig_Band = 2
	WifiConfig_RF_5GHZ    WifiConfig_Band = 5
)

var WifiConfig_Band_name = map[int32]string{
	0: "RF_UNKNOWN",
	2: "RF_2GHZ",
	5: "RF_5GHZ",
}

var WifiConfig_Band_value = map[string]int32{
	"RF_UNKNOWN": 0,
	"RF_2GHZ":    2,
	"RF_5GHZ":    5,
}

func (x WifiConfig_Band) String() string {
	return proto.EnumName(WifiConfig_Band_name, int32(x))
}

func (WifiConfig_Band) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{1, 1}
}

type MeshConfig struct {
	DisplayName          string   `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	ApplyDisplayName     bool     `protobuf:"varint,2,opt,name=apply_display_name,json=applyDisplayName,proto3" json:"apply_display_name,omitempty"`
	Auth                 MeshAuth `protobuf:"varint,3,opt,name=auth,proto3,enum=SpaceX.API.Device.MeshAuth" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshConfig) Reset()         { *m = MeshConfig{} }
func (m *MeshConfig) String() string { return proto.CompactTextString(m) }
func (*MeshConfig) ProtoMessage()    {}
func (*MeshConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{0}
}

func (m *MeshConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshConfig.Unmarshal(m, b)
}
func (m *MeshConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshConfig.Marshal(b, m, deterministic)
}
func (m *MeshConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig.Merge(m, src)
}
func (m *MeshConfig) XXX_Size() int {
	return xxx_messageInfo_MeshConfig.Size(m)
}
func (m *MeshConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig proto.InternalMessageInfo

func (m *MeshConfig) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *MeshConfig) GetApplyDisplayName() bool {
	if m != nil {
		return m.ApplyDisplayName
	}
	return false
}

func (m *MeshConfig) GetAuth() MeshAuth {
	if m != nil {
		return m.Auth
	}
	return MeshAuth_MESH_AUTH_UNKNOWN
}

type WifiConfig struct {
	CountryCode                string                 `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	SetupComplete              bool                   `protobuf:"varint,7,opt,name=setup_complete,json=setupComplete,proto3" json:"setup_complete,omitempty"`
	ApplySetupComplete         bool                   `protobuf:"varint,1010,opt,name=apply_setup_complete,json=applySetupComplete,proto3" json:"apply_setup_complete,omitempty"`
	Version                    uint32                 `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
	MacWan                     string                 `protobuf:"bytes,12,opt,name=mac_wan,json=macWan,proto3" json:"mac_wan,omitempty"`
	MacLan                     string                 `protobuf:"bytes,13,opt,name=mac_lan,json=macLan,proto3" json:"mac_lan,omitempty"`
	DeviceId                   string                 `protobuf:"bytes,16,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Channel_2Ghz               uint32                 `protobuf:"varint,19,opt,name=channel_2ghz,json=channel2ghz,proto3" json:"channel_2ghz,omitempty"`
	ApplyChannel_2Ghz          bool                   `protobuf:"varint,1013,opt,name=apply_channel_2ghz,json=applyChannel2ghz,proto3" json:"apply_channel_2ghz,omitempty"`
	Channel_5Ghz               uint32                 `protobuf:"varint,20,opt,name=channel_5ghz,json=channel5ghz,proto3" json:"channel_5ghz,omitempty"`
	ApplyChannel_5Ghz          bool                   `protobuf:"varint,1014,opt,name=apply_channel_5ghz,json=applyChannel5ghz,proto3" json:"apply_channel_5ghz,omitempty"`
	MeshAuths                  map[string]MeshAuth    `protobuf:"bytes,21,rep,name=mesh_auths,json=meshAuths,proto3" json:"mesh_auths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=SpaceX.API.Device.MeshAuth"` // Deprecated: Do not use.
	ApplyMeshAuths             bool                   `protobuf:"varint,1021,opt,name=apply_mesh_auths,json=applyMeshAuths,proto3" json:"apply_mesh_auths,omitempty"`                                                                                                      // Deprecated: Do not use.
	MeshConfigs                map[string]*MeshConfig `protobuf:"bytes,33,rep,name=mesh_configs,json=meshConfigs,proto3" json:"mesh_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ApplyMeshConfigs           bool                   `protobuf:"varint,1033,opt,name=apply_mesh_configs,json=applyMeshConfigs,proto3" json:"apply_mesh_configs,omitempty"`
	DynamicKeys                []*PublicKey           `protobuf:"bytes,22,rep,name=dynamic_keys,json=dynamicKeys,proto3" json:"dynamic_keys,omitempty"`
	IsRepeater                 bool                   `protobuf:"varint,23,opt,name=is_repeater,json=isRepeater,proto3" json:"is_repeater,omitempty"`
	ApplyIsRepeater            bool                   `protobuf:"varint,1031,opt,name=apply_is_repeater,json=applyIsRepeater,proto3" json:"apply_is_repeater,omitempty"`
	ExperimentsEnableMesh      bool                   `protobuf:"varint,24,opt,name=experiments_enable_mesh,json=experimentsEnableMesh,proto3" json:"experiments_enable_mesh,omitempty"`
	ApplyExperimentsEnableMesh bool                   `protobuf:"varint,1041,opt,name=apply_experiments_enable_mesh,json=applyExperimentsEnableMesh,proto3" json:"apply_experiments_enable_mesh,omitempty"`
	BootCount                  int32                  `protobuf:"varint,26,opt,name=boot_count,json=bootCount,proto3" json:"boot_count,omitempty"`
	DisableHidden              bool                   `protobuf:"varint,29,opt,name=disable_hidden,json=disableHidden,proto3" json:"disable_hidden,omitempty"`
	ApplyDisableHidden         bool                   `protobuf:"varint,1015,opt,name=apply_disable_hidden,json=applyDisableHidden,proto3" json:"apply_disable_hidden,omitempty"`
	HtBandwidth                string                 `protobuf:"bytes,2001,opt,name=ht_bandwidth,json=htBandwidth,proto3" json:"ht_bandwidth,omitempty"`
	VhtBandwidth               string                 `protobuf:"bytes,2002,opt,name=vht_bandwidth,json=vhtBandwidth,proto3" json:"vht_bandwidth,omitempty"`
	WirelessMode_2Ghz          string                 `protobuf:"bytes,2003,opt,name=wireless_mode_2ghz,json=wirelessMode2ghz,proto3" json:"wireless_mode_2ghz,omitempty"`
	WirelessMode_5Ghz          string                 `protobuf:"bytes,2004,opt,name=wireless_mode_5ghz,json=wirelessMode5ghz,proto3" json:"wireless_mode_5ghz,omitempty"`
	Boot                       *BootInfo              `protobuf:"bytes,3001,opt,name=boot,proto3" json:"boot,omitempty"`
	Nameservers                []string               `protobuf:"bytes,30,rep,name=nameservers,proto3" json:"nameservers,omitempty"`
	ApplyNameservers           bool                   `protobuf:"varint,1054,opt,name=apply_nameservers,json=applyNameservers,proto3" json:"apply_nameservers,omitempty"`
	BypassMode                 bool                   `protobuf:"varint,31,opt,name=bypass_mode,json=bypassMode,proto3" json:"bypass_mode,omitempty"`
	ApplyBypassMode            bool                   `protobuf:"varint,1055,opt,name=apply_bypass_mode,json=applyBypassMode,proto3" json:"apply_bypass_mode,omitempty"`
	Networks                   []*WifiConfig_Network  `protobuf:"bytes,1100,rep,name=networks,proto3" json:"networks,omitempty"`
	ApplyNetworks              bool                   `protobuf:"varint,1101,opt,name=apply_networks,json=applyNetworks,proto3" json:"apply_networks,omitempty"`
	NetworkName                string                 `protobuf:"bytes,1,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	ApplyNetworkName           bool                   `protobuf:"varint,1001,opt,name=apply_network_name,json=applyNetworkName,proto3" json:"apply_network_name,omitempty"`
	NetworkPassword            string                 `protobuf:"bytes,2,opt,name=network_password,json=networkPassword,proto3" json:"network_password,omitempty"`
	ApplyNetworkPassword       bool                   `protobuf:"varint,1002,opt,name=apply_network_password,json=applyNetworkPassword,proto3" json:"apply_network_password,omitempty"`
	LanIpv4                    string                 `protobuf:"bytes,5,opt,name=lan_ipv4,json=lanIpv4,proto3" json:"lan_ipv4,omitempty"`
	LanIpv4SubnetMask          string                 `protobuf:"bytes,6,opt,name=lan_ipv4_subnet_mask,json=lanIpv4SubnetMask,proto3" json:"lan_ipv4_subnet_mask,omitempty"`
	WifiSecurity               WifiConfig_Security    `protobuf:"varint,10,opt,name=wifi_security,json=wifiSecurity,proto3,enum=SpaceX.API.Device.WifiConfig_Security" json:"wifi_security,omitempty"`
	ApplyWifiSecurity          bool                   `protobuf:"varint,1004,opt,name=apply_wifi_security,json=applyWifiSecurity,proto3" json:"apply_wifi_security,omitempty"`
	NetworkName_5Ghz           string                 `protobuf:"bytes,11,opt,name=network_name_5ghz,json=networkName5ghz,proto3" json:"network_name_5ghz,omitempty"`
	ApplyNetworkName_5Ghz      bool                   `protobuf:"varint,1005,opt,name=apply_network_name_5ghz,json=applyNetworkName5ghz,proto3" json:"apply_network_name_5ghz,omitempty"`
	ApplyMacWan                bool                   `protobuf:"varint,1006,opt,name=apply_mac_wan,json=applyMacWan,proto3" json:"apply_mac_wan,omitempty"`
	ApplyMacLan                bool                   `protobuf:"varint,1007,opt,name=apply_mac_lan,json=applyMacLan,proto3" json:"apply_mac_lan,omitempty"`
	MacLan_2Ghz                string                 `protobuf:"bytes,14,opt,name=mac_lan_2ghz,json=macLan2ghz,proto3" json:"mac_lan_2ghz,omitempty"`
	ApplyMacLan_2Ghz           bool                   `protobuf:"varint,1008,opt,name=apply_mac_lan_2ghz,json=applyMacLan2ghz,proto3" json:"apply_mac_lan_2ghz,omitempty"`
	MacLan_5Ghz                string                 `protobuf:"bytes,15,opt,name=mac_lan_5ghz,json=macLan5ghz,proto3" json:"mac_lan_5ghz,omitempty"`
	ApplyMacLan_5Ghz           bool                   `protobuf:"varint,1009,opt,name=apply_mac_lan_5ghz,json=applyMacLan5ghz,proto3" json:"apply_mac_lan_5ghz,omitempty"`
	Disable_2Ghz               bool                   `protobuf:"varint,17,opt,name=disable_2ghz,json=disable2ghz,proto3" json:"disable_2ghz,omitempty"`
	ApplyDisable_2Ghz          bool                   `protobuf:"varint,1011,opt,name=apply_disable_2ghz,json=applyDisable2ghz,proto3" json:"apply_disable_2ghz,omitempty"`
	Disable_5Ghz               bool                   `protobuf:"varint,18,opt,name=disable_5ghz,json=disable5ghz,proto3" json:"disable_5ghz,omitempty"`
	ApplyDisable_5Ghz          bool                   `protobuf:"varint,1012,opt,name=apply_disable_5ghz,json=applyDisable5ghz,proto3" json:"apply_disable_5ghz,omitempty"`
	FactoryResetTicker         uint32                 `protobuf:"varint,8,opt,name=factory_reset_ticker,json=factoryResetTicker,proto3" json:"factory_reset_ticker,omitempty"`          // Deprecated: Do not use.
	MeshUpstreams              []string               `protobuf:"bytes,25,rep,name=mesh_upstreams,json=meshUpstreams,proto3" json:"mesh_upstreams,omitempty"`                           // Deprecated: Do not use.
	ApplyMeshUpstreams         bool                   `protobuf:"varint,1051,opt,name=apply_mesh_upstreams,json=applyMeshUpstreams,proto3" json:"apply_mesh_upstreams,omitempty"`       // Deprecated: Do not use.
	TrustedPeers               []string               `protobuf:"bytes,27,rep,name=trusted_peers,json=trustedPeers,proto3" json:"trusted_peers,omitempty"`                              // Deprecated: Do not use.
	ApplyTrustedPeers          bool                   `protobuf:"varint,1052,opt,name=apply_trusted_peers,json=applyTrustedPeers,proto3" json:"apply_trusted_peers,omitempty"`          // Deprecated: Do not use.
	DistrustedPeers            []string               `protobuf:"bytes,28,rep,name=distrusted_peers,json=distrustedPeers,proto3" json:"distrusted_peers,omitempty"`                     // Deprecated: Do not use.
	ApplyDistrustedPeers       bool                   `protobuf:"varint,1053,opt,name=apply_distrusted_peers,json=applyDistrustedPeers,proto3" json:"apply_distrusted_peers,omitempty"` // Deprecated: Do not use.
	EnableRemoteSsh            bool                   `protobuf:"varint,34,opt,name=enable_remote_ssh,json=enableRemoteSsh,proto3" json:"enable_remote_ssh,omitempty"`
	ApplyEnableRemoteSsh       bool                   `protobuf:"varint,1057,opt,name=apply_enable_remote_ssh,json=applyEnableRemoteSsh,proto3" json:"apply_enable_remote_ssh,omitempty"`
	LastRemoteSshAccess        int64                  `protobuf:"varint,35,opt,name=last_remote_ssh_access,json=lastRemoteSshAccess,proto3" json:"last_remote_ssh_access,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}               `json:"-"`
	XXX_unrecognized           []byte                 `json:"-"`
	XXX_sizecache              int32                  `json:"-"`
}

func (m *WifiConfig) Reset()         { *m = WifiConfig{} }
func (m *WifiConfig) String() string { return proto.CompactTextString(m) }
func (*WifiConfig) ProtoMessage()    {}
func (*WifiConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{1}
}

func (m *WifiConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WifiConfig.Unmarshal(m, b)
}
func (m *WifiConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WifiConfig.Marshal(b, m, deterministic)
}
func (m *WifiConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WifiConfig.Merge(m, src)
}
func (m *WifiConfig) XXX_Size() int {
	return xxx_messageInfo_WifiConfig.Size(m)
}
func (m *WifiConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WifiConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WifiConfig proto.InternalMessageInfo

func (m *WifiConfig) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *WifiConfig) GetSetupComplete() bool {
	if m != nil {
		return m.SetupComplete
	}
	return false
}

func (m *WifiConfig) GetApplySetupComplete() bool {
	if m != nil {
		return m.ApplySetupComplete
	}
	return false
}

func (m *WifiConfig) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *WifiConfig) GetMacWan() string {
	if m != nil {
		return m.MacWan
	}
	return ""
}

func (m *WifiConfig) GetMacLan() string {
	if m != nil {
		return m.MacLan
	}
	return ""
}

func (m *WifiConfig) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *WifiConfig) GetChannel_2Ghz() uint32 {
	if m != nil {
		return m.Channel_2Ghz
	}
	return 0
}

func (m *WifiConfig) GetApplyChannel_2Ghz() bool {
	if m != nil {
		return m.ApplyChannel_2Ghz
	}
	return false
}

func (m *WifiConfig) GetChannel_5Ghz() uint32 {
	if m != nil {
		return m.Channel_5Ghz
	}
	return 0
}

func (m *WifiConfig) GetApplyChannel_5Ghz() bool {
	if m != nil {
		return m.ApplyChannel_5Ghz
	}
	return false
}

// Deprecated: Do not use.
func (m *WifiConfig) GetMeshAuths() map[string]MeshAuth {
	if m != nil {
		return m.MeshAuths
	}
	return nil
}

// Deprecated: Do not use.
func (m *WifiConfig) GetApplyMeshAuths() bool {
	if m != nil {
		return m.ApplyMeshAuths
	}
	return false
}

func (m *WifiConfig) GetMeshConfigs() map[string]*MeshConfig {
	if m != nil {
		return m.MeshConfigs
	}
	return nil
}

func (m *WifiConfig) GetApplyMeshConfigs() bool {
	if m != nil {
		return m.ApplyMeshConfigs
	}
	return false
}

func (m *WifiConfig) GetDynamicKeys() []*PublicKey {
	if m != nil {
		return m.DynamicKeys
	}
	return nil
}

func (m *WifiConfig) GetIsRepeater() bool {
	if m != nil {
		return m.IsRepeater
	}
	return false
}

func (m *WifiConfig) GetApplyIsRepeater() bool {
	if m != nil {
		return m.ApplyIsRepeater
	}
	return false
}

func (m *WifiConfig) GetExperimentsEnableMesh() bool {
	if m != nil {
		return m.ExperimentsEnableMesh
	}
	return false
}

func (m *WifiConfig) GetApplyExperimentsEnableMesh() bool {
	if m != nil {
		return m.ApplyExperimentsEnableMesh
	}
	return false
}

func (m *WifiConfig) GetBootCount() int32 {
	if m != nil {
		return m.BootCount
	}
	return 0
}

func (m *WifiConfig) GetDisableHidden() bool {
	if m != nil {
		return m.DisableHidden
	}
	return false
}

func (m *WifiConfig) GetApplyDisableHidden() bool {
	if m != nil {
		return m.ApplyDisableHidden
	}
	return false
}

func (m *WifiConfig) GetHtBandwidth() string {
	if m != nil {
		return m.HtBandwidth
	}
	return ""
}

func (m *WifiConfig) GetVhtBandwidth() string {
	if m != nil {
		return m.VhtBandwidth
	}
	return ""
}

func (m *WifiConfig) GetWirelessMode_2Ghz() string {
	if m != nil {
		return m.WirelessMode_2Ghz
	}
	return ""
}

func (m *WifiConfig) GetWirelessMode_5Ghz() string {
	if m != nil {
		return m.WirelessMode_5Ghz
	}
	return ""
}

func (m *WifiConfig) GetBoot() *BootInfo {
	if m != nil {
		return m.Boot
	}
	return nil
}

func (m *WifiConfig) GetNameservers() []string {
	if m != nil {
		return m.Nameservers
	}
	return nil
}

func (m *WifiConfig) GetApplyNameservers() bool {
	if m != nil {
		return m.ApplyNameservers
	}
	return false
}

func (m *WifiConfig) GetBypassMode() bool {
	if m != nil {
		return m.BypassMode
	}
	return false
}

func (m *WifiConfig) GetApplyBypassMode() bool {
	if m != nil {
		return m.ApplyBypassMode
	}
	return false
}

func (m *WifiConfig) GetNetworks() []*WifiConfig_Network {
	if m != nil {
		return m.Networks
	}
	return nil
}

func (m *WifiConfig) GetApplyNetworks() bool {
	if m != nil {
		return m.ApplyNetworks
	}
	return false
}

func (m *WifiConfig) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

func (m *WifiConfig) GetApplyNetworkName() bool {
	if m != nil {
		return m.ApplyNetworkName
	}
	return false
}

func (m *WifiConfig) GetNetworkPassword() string {
	if m != nil {
		return m.NetworkPassword
	}
	return ""
}

func (m *WifiConfig) GetApplyNetworkPassword() bool {
	if m != nil {
		return m.ApplyNetworkPassword
	}
	return false
}

func (m *WifiConfig) GetLanIpv4() string {
	if m != nil {
		return m.LanIpv4
	}
	return ""
}

func (m *WifiConfig) GetLanIpv4SubnetMask() string {
	if m != nil {
		return m.LanIpv4SubnetMask
	}
	return ""
}

func (m *WifiConfig) GetWifiSecurity() WifiConfig_Security {
	if m != nil {
		return m.WifiSecurity
	}
	return WifiConfig_UNKNOWN
}

func (m *WifiConfig) GetApplyWifiSecurity() bool {
	if m != nil {
		return m.ApplyWifiSecurity
	}
	return false
}

func (m *WifiConfig) GetNetworkName_5Ghz() string {
	if m != nil {
		return m.NetworkName_5Ghz
	}
	return ""
}

func (m *WifiConfig) GetApplyNetworkName_5Ghz() bool {
	if m != nil {
		return m.ApplyNetworkName_5Ghz
	}
	return false
}

func (m *WifiConfig) GetApplyMacWan() bool {
	if m != nil {
		return m.ApplyMacWan
	}
	return false
}

func (m *WifiConfig) GetApplyMacLan() bool {
	if m != nil {
		return m.ApplyMacLan
	}
	return false
}

func (m *WifiConfig) GetMacLan_2Ghz() string {
	if m != nil {
		return m.MacLan_2Ghz
	}
	return ""
}

func (m *WifiConfig) GetApplyMacLan_2Ghz() bool {
	if m != nil {
		return m.ApplyMacLan_2Ghz
	}
	return false
}

func (m *WifiConfig) GetMacLan_5Ghz() string {
	if m != nil {
		return m.MacLan_5Ghz
	}
	return ""
}

func (m *WifiConfig) GetApplyMacLan_5Ghz() bool {
	if m != nil {
		return m.ApplyMacLan_5Ghz
	}
	return false
}

func (m *WifiConfig) GetDisable_2Ghz() bool {
	if m != nil {
		return m.Disable_2Ghz
	}
	return false
}

func (m *WifiConfig) GetApplyDisable_2Ghz() bool {
	if m != nil {
		return m.ApplyDisable_2Ghz
	}
	return false
}

func (m *WifiConfig) GetDisable_5Ghz() bool {
	if m != nil {
		return m.Disable_5Ghz
	}
	return false
}

func (m *WifiConfig) GetApplyDisable_5Ghz() bool {
	if m != nil {
		return m.ApplyDisable_5Ghz
	}
	return false
}

// Deprecated: Do not use.
func (m *WifiConfig) GetFactoryResetTicker() uint32 {
	if m != nil {
		return m.FactoryResetTicker
	}
	return 0
}

// Deprecated: Do not use.
func (m *WifiConfig) GetMeshUpstreams() []string {
	if m != nil {
		return m.MeshUpstreams
	}
	return nil
}

// Deprecated: Do not use.
func (m *WifiConfig) GetApplyMeshUpstreams() bool {
	if m != nil {
		return m.ApplyMeshUpstreams
	}
	return false
}

// Deprecated: Do not use.
func (m *WifiConfig) GetTrustedPeers() []string {
	if m != nil {
		return m.TrustedPeers
	}
	return nil
}

// Deprecated: Do not use.
func (m *WifiConfig) GetApplyTrustedPeers() bool {
	if m != nil {
		return m.ApplyTrustedPeers
	}
	return false
}

// Deprecated: Do not use.
func (m *WifiConfig) GetDistrustedPeers() []string {
	if m != nil {
		return m.DistrustedPeers
	}
	return nil
}

// Deprecated: Do not use.
func (m *WifiConfig) GetApplyDistrustedPeers() bool {
	if m != nil {
		return m.ApplyDistrustedPeers
	}
	return false
}

func (m *WifiConfig) GetEnableRemoteSsh() bool {
	if m != nil {
		return m.EnableRemoteSsh
	}
	return false
}

func (m *WifiConfig) GetApplyEnableRemoteSsh() bool {
	if m != nil {
		return m.ApplyEnableRemoteSsh
	}
	return false
}

func (m *WifiConfig) GetLastRemoteSshAccess() int64 {
	if m != nil {
		return m.LastRemoteSshAccess
	}
	return 0
}

type WifiConfig_BasicServiceSet struct {
	Uid         string `protobuf:"bytes,1000,opt,name=uid,proto3" json:"uid,omitempty"`
	ApplyCreate bool   `protobuf:"varint,1001,opt,name=apply_create,json=applyCreate,proto3" json:"apply_create,omitempty"`
	ApplyDelete bool   `protobuf:"varint,1002,opt,name=apply_delete,json=applyDelete,proto3" json:"apply_delete,omitempty"`
	Bssid       string `protobuf:"bytes,1003,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Ssid        string `protobuf:"bytes,1005,opt,name=ssid,proto3" json:"ssid,omitempty"`
	ApplySsid   bool   `protobuf:"varint,1006,opt,name=apply_ssid,json=applySsid,proto3" json:"apply_ssid,omitempty"`
	// Types that are valid to be assigned to Auth:
	//	*WifiConfig_BasicServiceSet_AuthOpen
	//	*WifiConfig_BasicServiceSet_AuthWpa2
	//	*WifiConfig_BasicServiceSet_AuthWpa3
	//	*WifiConfig_BasicServiceSet_AuthWpa2Wpa3
	//	*WifiConfig_BasicServiceSet_AuthRadius
	Auth                 isWifiConfig_BasicServiceSet_Auth `protobuf_oneof:"auth"`
	ApplyAuth            bool                              `protobuf:"varint,2000,opt,name=apply_auth,json=applyAuth,proto3" json:"apply_auth,omitempty"`
	Band                 WifiConfig_Band                   `protobuf:"varint,1011,opt,name=band,proto3,enum=SpaceX.API.Device.WifiConfig_Band" json:"band,omitempty"`
	ApplyBand            bool                              `protobuf:"varint,1012,opt,name=apply_band,json=applyBand,proto3" json:"apply_band,omitempty"`
	Disable              bool                              `protobuf:"varint,1013,opt,name=disable,proto3" json:"disable,omitempty"`
	ApplyDisable         bool                              `protobuf:"varint,1014,opt,name=apply_disable,json=applyDisable,proto3" json:"apply_disable,omitempty"`
	Hidden               bool                              `protobuf:"varint,1015,opt,name=hidden,proto3" json:"hidden,omitempty"`
	ApplyHidden          bool                              `protobuf:"varint,1016,opt,name=apply_hidden,json=applyHidden,proto3" json:"apply_hidden,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *WifiConfig_BasicServiceSet) Reset()         { *m = WifiConfig_BasicServiceSet{} }
func (m *WifiConfig_BasicServiceSet) String() string { return proto.CompactTextString(m) }
func (*WifiConfig_BasicServiceSet) ProtoMessage()    {}
func (*WifiConfig_BasicServiceSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{1, 2}
}

func (m *WifiConfig_BasicServiceSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WifiConfig_BasicServiceSet.Unmarshal(m, b)
}
func (m *WifiConfig_BasicServiceSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WifiConfig_BasicServiceSet.Marshal(b, m, deterministic)
}
func (m *WifiConfig_BasicServiceSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WifiConfig_BasicServiceSet.Merge(m, src)
}
func (m *WifiConfig_BasicServiceSet) XXX_Size() int {
	return xxx_messageInfo_WifiConfig_BasicServiceSet.Size(m)
}
func (m *WifiConfig_BasicServiceSet) XXX_DiscardUnknown() {
	xxx_messageInfo_WifiConfig_BasicServiceSet.DiscardUnknown(m)
}

var xxx_messageInfo_WifiConfig_BasicServiceSet proto.InternalMessageInfo

func (m *WifiConfig_BasicServiceSet) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *WifiConfig_BasicServiceSet) GetApplyCreate() bool {
	if m != nil {
		return m.ApplyCreate
	}
	return false
}

func (m *WifiConfig_BasicServiceSet) GetApplyDelete() bool {
	if m != nil {
		return m.ApplyDelete
	}
	return false
}

func (m *WifiConfig_BasicServiceSet) GetBssid() string {
	if m != nil {
		return m.Bssid
	}
	return ""
}

func (m *WifiConfig_BasicServiceSet) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func (m *WifiConfig_BasicServiceSet) GetApplySsid() bool {
	if m != nil {
		return m.ApplySsid
	}
	return false
}

type isWifiConfig_BasicServiceSet_Auth interface {
	isWifiConfig_BasicServiceSet_Auth()
}

type WifiConfig_BasicServiceSet_AuthOpen struct {
	AuthOpen *AuthOpen `protobuf:"bytes,2001,opt,name=auth_open,json=authOpen,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthWpa2 struct {
	AuthWpa2 *AuthWpa2 `protobuf:"bytes,2002,opt,name=auth_wpa2,json=authWpa2,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthWpa3 struct {
	AuthWpa3 *AuthWpa3 `protobuf:"bytes,2003,opt,name=auth_wpa3,json=authWpa3,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthWpa2Wpa3 struct {
	AuthWpa2Wpa3 *AuthWpa2Wpa3 `protobuf:"bytes,2004,opt,name=auth_wpa2_wpa3,json=authWpa2Wpa3,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthRadius struct {
	AuthRadius *AuthRadius `protobuf:"bytes,2005,opt,name=auth_radius,json=authRadius,proto3,oneof"`
}

func (*WifiConfig_BasicServiceSet_AuthOpen) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthWpa2) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthWpa3) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthWpa2Wpa3) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthRadius) isWifiConfig_BasicServiceSet_Auth() {}

func (m *WifiConfig_BasicServiceSet) GetAuth() isWifiConfig_BasicServiceSet_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *WifiConfig_BasicServiceSet) GetAuthOpen() *AuthOpen {
	if x, ok := m.GetAuth().(*WifiConfig_BasicServiceSet_AuthOpen); ok {
		return x.AuthOpen
	}
	return nil
}

func (m *WifiConfig_BasicServiceSet) GetAuthWpa2() *AuthWpa2 {
	if x, ok := m.GetAuth().(*WifiConfig_BasicServiceSet_AuthWpa2); ok {
		return x.AuthWpa2
	}
	return nil
}

func (m *WifiConfig_BasicServiceSet) GetAuthWpa3() *AuthWpa3 {
	if x, ok := m.GetAuth().(*WifiConfig_BasicServiceSet_AuthWpa3); ok {
		return x.AuthWpa3
	}
	return nil
}

func (m *WifiConfig_BasicServiceSet) GetAuthWpa2Wpa3() *AuthWpa2Wpa3 {
	if x, ok := m.GetAuth().(*WifiConfig_BasicServiceSet_AuthWpa2Wpa3); ok {
		return x.AuthWpa2Wpa3
	}
	return nil
}

func (m *WifiConfig_BasicServiceSet) GetAuthRadius() *AuthRadius {
	if x, ok := m.GetAuth().(*WifiConfig_BasicServiceSet_AuthRadius); ok {
		return x.AuthRadius
	}
	return nil
}

func (m *WifiConfig_BasicServiceSet) GetApplyAuth() bool {
	if m != nil {
		return m.ApplyAuth
	}
	return false
}

func (m *WifiConfig_BasicServiceSet) GetBand() WifiConfig_Band {
	if m != nil {
		return m.Band
	}
	return WifiConfig_RF_UNKNOWN
}

func (m *WifiConfig_BasicServiceSet) GetApplyBand() bool {
	if m != nil {
		return m.ApplyBand
	}
	return false
}

func (m *WifiConfig_BasicServiceSet) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

func (m *WifiConfig_BasicServiceSet) GetApplyDisable() bool {
	if m != nil {
		return m.ApplyDisable
	}
	return false
}

func (m *WifiConfig_BasicServiceSet) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

func (m *WifiConfig_BasicServiceSet) GetApplyHidden() bool {
	if m != nil {
		return m.ApplyHidden
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WifiConfig_BasicServiceSet) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WifiConfig_BasicServiceSet_AuthOpen)(nil),
		(*WifiConfig_BasicServiceSet_AuthWpa2)(nil),
		(*WifiConfig_BasicServiceSet_AuthWpa3)(nil),
		(*WifiConfig_BasicServiceSet_AuthWpa2Wpa3)(nil),
		(*WifiConfig_BasicServiceSet_AuthRadius)(nil),
	}
}

type WifiConfig_Network struct {
	Uid                  string                        `protobuf:"bytes,1000,opt,name=uid,proto3" json:"uid,omitempty"`
	ApplyCreate          bool                          `protobuf:"varint,1001,opt,name=apply_create,json=applyCreate,proto3" json:"apply_create,omitempty"`
	ApplyDelete          bool                          `protobuf:"varint,1002,opt,name=apply_delete,json=applyDelete,proto3" json:"apply_delete,omitempty"`
	Ipv4                 string                        `protobuf:"bytes,1003,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv4SubnetMask       string                        `protobuf:"bytes,1005,opt,name=ipv4_subnet_mask,json=ipv4SubnetMask,proto3" json:"ipv4_subnet_mask,omitempty"`
	BasicServiceSets     []*WifiConfig_BasicServiceSet `protobuf:"bytes,1007,rep,name=basic_service_sets,json=basicServiceSets,proto3" json:"basic_service_sets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *WifiConfig_Network) Reset()         { *m = WifiConfig_Network{} }
func (m *WifiConfig_Network) String() string { return proto.CompactTextString(m) }
func (*WifiConfig_Network) ProtoMessage()    {}
func (*WifiConfig_Network) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{1, 3}
}

func (m *WifiConfig_Network) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WifiConfig_Network.Unmarshal(m, b)
}
func (m *WifiConfig_Network) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WifiConfig_Network.Marshal(b, m, deterministic)
}
func (m *WifiConfig_Network) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WifiConfig_Network.Merge(m, src)
}
func (m *WifiConfig_Network) XXX_Size() int {
	return xxx_messageInfo_WifiConfig_Network.Size(m)
}
func (m *WifiConfig_Network) XXX_DiscardUnknown() {
	xxx_messageInfo_WifiConfig_Network.DiscardUnknown(m)
}

var xxx_messageInfo_WifiConfig_Network proto.InternalMessageInfo

func (m *WifiConfig_Network) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *WifiConfig_Network) GetApplyCreate() bool {
	if m != nil {
		return m.ApplyCreate
	}
	return false
}

func (m *WifiConfig_Network) GetApplyDelete() bool {
	if m != nil {
		return m.ApplyDelete
	}
	return false
}

func (m *WifiConfig_Network) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *WifiConfig_Network) GetIpv4SubnetMask() string {
	if m != nil {
		return m.Ipv4SubnetMask
	}
	return ""
}

func (m *WifiConfig_Network) GetBasicServiceSets() []*WifiConfig_BasicServiceSet {
	if m != nil {
		return m.BasicServiceSets
	}
	return nil
}

type AuthOpen struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthOpen) Reset()         { *m = AuthOpen{} }
func (m *AuthOpen) String() string { return proto.CompactTextString(m) }
func (*AuthOpen) ProtoMessage()    {}
func (*AuthOpen) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{2}
}

func (m *AuthOpen) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthOpen.Unmarshal(m, b)
}
func (m *AuthOpen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthOpen.Marshal(b, m, deterministic)
}
func (m *AuthOpen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthOpen.Merge(m, src)
}
func (m *AuthOpen) XXX_Size() int {
	return xxx_messageInfo_AuthOpen.Size(m)
}
func (m *AuthOpen) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthOpen.DiscardUnknown(m)
}

var xxx_messageInfo_AuthOpen proto.InternalMessageInfo

type AuthWpa2 struct {
	Password             string   `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthWpa2) Reset()         { *m = AuthWpa2{} }
func (m *AuthWpa2) String() string { return proto.CompactTextString(m) }
func (*AuthWpa2) ProtoMessage()    {}
func (*AuthWpa2) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{3}
}

func (m *AuthWpa2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthWpa2.Unmarshal(m, b)
}
func (m *AuthWpa2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthWpa2.Marshal(b, m, deterministic)
}
func (m *AuthWpa2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthWpa2.Merge(m, src)
}
func (m *AuthWpa2) XXX_Size() int {
	return xxx_messageInfo_AuthWpa2.Size(m)
}
func (m *AuthWpa2) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthWpa2.DiscardUnknown(m)
}

var xxx_messageInfo_AuthWpa2 proto.InternalMessageInfo

func (m *AuthWpa2) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthWpa3 struct {
	Password             string   `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthWpa3) Reset()         { *m = AuthWpa3{} }
func (m *AuthWpa3) String() string { return proto.CompactTextString(m) }
func (*AuthWpa3) ProtoMessage()    {}
func (*AuthWpa3) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{4}
}

func (m *AuthWpa3) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthWpa3.Unmarshal(m, b)
}
func (m *AuthWpa3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthWpa3.Marshal(b, m, deterministic)
}
func (m *AuthWpa3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthWpa3.Merge(m, src)
}
func (m *AuthWpa3) XXX_Size() int {
	return xxx_messageInfo_AuthWpa3.Size(m)
}
func (m *AuthWpa3) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthWpa3.DiscardUnknown(m)
}

var xxx_messageInfo_AuthWpa3 proto.InternalMessageInfo

func (m *AuthWpa3) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthWpa2Wpa3 struct {
	Password             string   `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthWpa2Wpa3) Reset()         { *m = AuthWpa2Wpa3{} }
func (m *AuthWpa2Wpa3) String() string { return proto.CompactTextString(m) }
func (*AuthWpa2Wpa3) ProtoMessage()    {}
func (*AuthWpa2Wpa3) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{5}
}

func (m *AuthWpa2Wpa3) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthWpa2Wpa3.Unmarshal(m, b)
}
func (m *AuthWpa2Wpa3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthWpa2Wpa3.Marshal(b, m, deterministic)
}
func (m *AuthWpa2Wpa3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthWpa2Wpa3.Merge(m, src)
}
func (m *AuthWpa2Wpa3) XXX_Size() int {
	return xxx_messageInfo_AuthWpa2Wpa3.Size(m)
}
func (m *AuthWpa2Wpa3) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthWpa2Wpa3.DiscardUnknown(m)
}

var xxx_messageInfo_AuthWpa2Wpa3 proto.InternalMessageInfo

func (m *AuthWpa2Wpa3) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthRadius struct {
	Server               string   `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthRadius) Reset()         { *m = AuthRadius{} }
func (m *AuthRadius) String() string { return proto.CompactTextString(m) }
func (*AuthRadius) ProtoMessage()    {}
func (*AuthRadius) Descriptor() ([]byte, []int) {
	return fileDescriptor_63938ee7483f9ada, []int{6}
}

func (m *AuthRadius) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthRadius.Unmarshal(m, b)
}
func (m *AuthRadius) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthRadius.Marshal(b, m, deterministic)
}
func (m *AuthRadius) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthRadius.Merge(m, src)
}
func (m *AuthRadius) XXX_Size() int {
	return xxx_messageInfo_AuthRadius.Size(m)
}
func (m *AuthRadius) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthRadius.DiscardUnknown(m)
}

var xxx_messageInfo_AuthRadius proto.InternalMessageInfo

func (m *AuthRadius) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func init() {
	proto.RegisterEnum("SpaceX.API.Device.MeshAuth", MeshAuth_name, MeshAuth_value)
	proto.RegisterEnum("SpaceX.API.Device.WifiConfig_Security", WifiConfig_Security_name, WifiConfig_Security_value)
	proto.RegisterEnum("SpaceX.API.Device.WifiConfig_Band", WifiConfig_Band_name, WifiConfig_Band_value)
	proto.RegisterType((*MeshConfig)(nil), "SpaceX.API.Device.MeshConfig")
	proto.RegisterType((*WifiConfig)(nil), "SpaceX.API.Device.WifiConfig")
	proto.RegisterMapType((map[string]MeshAuth)(nil), "SpaceX.API.Device.WifiConfig.MeshAuthsEntry")
	proto.RegisterMapType((map[string]*MeshConfig)(nil), "SpaceX.API.Device.WifiConfig.MeshConfigsEntry")
	proto.RegisterType((*WifiConfig_BasicServiceSet)(nil), "SpaceX.API.Device.WifiConfig.BasicServiceSet")
	proto.RegisterType((*WifiConfig_Network)(nil), "SpaceX.API.Device.WifiConfig.Network")
	proto.RegisterType((*AuthOpen)(nil), "SpaceX.API.Device.AuthOpen")
	proto.RegisterType((*AuthWpa2)(nil), "SpaceX.API.Device.AuthWpa2")
	proto.RegisterType((*AuthWpa3)(nil), "SpaceX.API.Device.AuthWpa3")
	proto.RegisterType((*AuthWpa2Wpa3)(nil), "SpaceX.API.Device.AuthWpa2Wpa3")
	proto.RegisterType((*AuthRadius)(nil), "SpaceX.API.Device.AuthRadius")
}

func init() {
	proto.RegisterFile("spacex/api/device/wifi_config.proto", fileDescriptor_63938ee7483f9ada)
}

var fileDescriptor_63938ee7483f9ada = []byte{
	// 1881 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x5b, 0x4f, 0x1c, 0xc9,
	0x15, 0xf6, 0x70, 0x9b, 0xe6, 0xcc, 0x85, 0xa1, 0x00, 0xd3, 0xc6, 0x6b, 0x33, 0xe0, 0x5d, 0x87,
	0x75, 0x0c, 0xec, 0x32, 0x66, 0x93, 0x4d, 0x1e, 0x22, 0x06, 0xd8, 0x80, 0x1d, 0x30, 0xe9, 0xc1,
	0x22, 0x59, 0x25, 0x6a, 0xd5, 0x74, 0x17, 0x3b, 0x2d, 0x66, 0xba, 0x5b, 0x5d, 0x3d, 0xb0, 0x93,
	0xc7, 0xbc, 0x44, 0x79, 0x89, 0x94, 0xe7, 0x5c, 0xf7, 0x17, 0xe4, 0x39, 0xff, 0x21, 0x91, 0x72,
	0xd9, 0xfc, 0x87, 0x64, 0x2f, 0xb9, 0x3a, 0x17, 0x29, 0x8a, 0x14, 0xd5, 0xa9, 0xea, 0xee, 0x6a,
	0x18, 0xe3, 0xa7, 0x7d, 0x19, 0x75, 0x9d, 0xf3, 0x9d, 0xaf, 0x6e, 0xe7, 0x56, 0x03, 0xf7, 0x78,
	0x48, 0x1d, 0xf6, 0xfe, 0x3a, 0x0d, 0xbd, 0x75, 0x97, 0x9d, 0x7b, 0x0e, 0x5b, 0xbf, 0xf0, 0x4e,
	0x3d, 0xdb, 0x09, 0xfc, 0x53, 0xef, 0xbd, 0xb5, 0x30, 0x0a, 0xe2, 0x80, 0x4c, 0xb7, 0x04, 0xe8,
	0x1b, 0x6b, 0x5b, 0x47, 0xfb, 0x6b, 0x3b, 0x08, 0x5a, 0x58, 0xbc, 0x6a, 0xe7, 0x04, 0xbd, 0x1e,
	0xf5, 0x5d, 0x69, 0xb3, 0x70, 0x77, 0x38, 0x20, 0xf0, 0xa5, 0x7e, 0xf9, 0x07, 0x05, 0x80, 0x03,
	0xc6, 0x3b, 0xdb, 0x38, 0x11, 0x59, 0x82, 0xb2, 0xeb, 0xf1, 0xb0, 0x4b, 0x07, 0xb6, 0x4f, 0x7b,
	0xcc, 0x2c, 0xd4, 0x0b, 0x2b, 0x93, 0x56, 0x49, 0xc9, 0x0e, 0x69, 0x8f, 0x91, 0x87, 0x40, 0x68,
	0x18, 0x76, 0x07, 0x76, 0x0e, 0x38, 0x52, 0x2f, 0xac, 0x18, 0x56, 0x0d, 0x35, 0x3b, 0x1a, 0x7a,
	0x1d, 0xc6, 0x68, 0x3f, 0xee, 0x98, 0xa3, 0xf5, 0xc2, 0x4a, 0x75, 0xe3, 0xf6, 0xda, 0x95, 0x2d,
	0xac, 0x89, 0xd9, 0xb7, 0xfa, 0x71, 0xc7, 0x42, 0xe0, 0xf2, 0x2f, 0x96, 0x00, 0x4e, 0xbc, 0x53,
	0x2f, 0x5b, 0x90, 0x13, 0xf4, 0xfd, 0x38, 0x1a, 0xd8, 0x4e, 0xe0, 0x32, 0xe4, 0x99, 0xb4, 0x4a,
	0x4a, 0xb6, 0x1d, 0xb8, 0x8c, 0xbc, 0x06, 0x55, 0xce, 0xe2, 0x7e, 0x68, 0x3b, 0x41, 0x2f, 0xec,
	0xb2, 0x98, 0x99, 0x45, 0x5c, 0x4c, 0x05, 0xa5, 0xdb, 0x4a, 0x48, 0xde, 0x84, 0x59, 0xb9, 0xee,
	0x4b, 0xe0, 0xbf, 0x4b, 0xb4, 0xdc, 0x54, 0x2b, 0x67, 0x62, 0x42, 0xf1, 0x9c, 0x45, 0xdc, 0x0b,
	0x7c, 0x73, 0xb2, 0x5e, 0x58, 0xa9, 0x58, 0xc9, 0x90, 0xcc, 0x43, 0xb1, 0x47, 0x1d, 0xfb, 0x82,
	0xfa, 0x66, 0x19, 0x57, 0x34, 0xd1, 0xa3, 0xce, 0x09, 0x4d, 0x15, 0x5d, 0xea, 0x9b, 0x95, 0x54,
	0xf1, 0x35, 0xea, 0x93, 0xdb, 0x30, 0x29, 0xcf, 0xdf, 0xf6, 0x5c, 0xb3, 0x86, 0x2a, 0x43, 0x0a,
	0xf6, 0x5d, 0xdc, 0x65, 0x87, 0xfa, 0x3e, 0xeb, 0xda, 0x1b, 0xef, 0x75, 0xbe, 0x63, 0xce, 0xe0,
	0x6c, 0x25, 0x25, 0x13, 0x22, 0xb2, 0x9a, 0x1c, 0x7b, 0x0e, 0xf8, 0xcf, 0xa2, 0x76, 0xee, 0xdb,
	0x1a, 0x5c, 0x63, 0xdc, 0x14, 0xc0, 0xd9, 0x1c, 0xe3, 0xe6, 0x50, 0x46, 0x04, 0xfe, 0x6b, 0x08,
	0x23, 0xc2, 0x9f, 0x02, 0xf4, 0x18, 0xef, 0xd8, 0xe2, 0x96, 0xb8, 0x39, 0x57, 0x1f, 0x5d, 0x29,
	0x6d, 0x3c, 0x1c, 0x72, 0x9f, 0xd9, 0xe5, 0xa5, 0x57, 0xcb, 0x77, 0xc5, 0x65, 0x35, 0x47, 0xcc,
	0x82, 0x35, 0xd9, 0x4b, 0x64, 0x64, 0x15, 0xe4, 0x24, 0xb6, 0x46, 0xfb, 0x3f, 0x9c, 0x1d, 0x91,
	0x55, 0x54, 0xa6, 0x14, 0xe4, 0xeb, 0x50, 0x46, 0xa0, 0x0c, 0x09, 0x6e, 0x2e, 0xe1, 0x0a, 0xd6,
	0x5e, 0xbe, 0x02, 0xf9, 0x29, 0xd7, 0x60, 0x95, 0x7a, 0x99, 0x24, 0x3b, 0x81, 0x1c, 0xf1, 0xf7,
	0x0d, 0xed, 0x04, 0x34, 0x02, 0xf2, 0x15, 0x28, 0xbb, 0x03, 0x9f, 0xf6, 0x3c, 0xc7, 0x3e, 0x63,
	0x03, 0x6e, 0xde, 0xc4, 0x15, 0xbc, 0x32, 0x64, 0x05, 0x47, 0xfd, 0x76, 0xd7, 0x73, 0x9e, 0xb0,
	0x81, 0x55, 0x52, 0x16, 0x4f, 0xd8, 0x80, 0x93, 0x45, 0x28, 0x79, 0xdc, 0x8e, 0x58, 0xc8, 0x68,
	0xcc, 0x22, 0x73, 0x1e, 0xe7, 0x01, 0x8f, 0x5b, 0x4a, 0x42, 0x3e, 0x0f, 0xd3, 0x72, 0x41, 0x3a,
	0xec, 0x7b, 0x72, 0x3d, 0x53, 0xa8, 0xd9, 0xcf, 0xc0, 0x6f, 0xc1, 0x3c, 0x7b, 0x3f, 0x64, 0x91,
	0xd7, 0x63, 0x7e, 0xcc, 0x6d, 0xe6, 0xd3, 0x76, 0x97, 0xe1, 0x56, 0x4c, 0x13, 0x2d, 0xe6, 0x34,
	0xf5, 0x2e, 0x6a, 0xc5, 0x6e, 0x48, 0x13, 0xee, 0xc8, 0x49, 0x5e, 0x64, 0xfd, 0x43, 0x39, 0xe1,
	0x02, 0xa2, 0x76, 0x87, 0x72, 0xdc, 0x01, 0x68, 0x07, 0x41, 0x6c, 0x63, 0x1c, 0x9a, 0x0b, 0xf5,
	0xc2, 0xca, 0xb8, 0x35, 0x29, 0x24, 0xdb, 0x42, 0x20, 0x42, 0xd2, 0xf5, 0x38, 0x32, 0x76, 0x3c,
	0xd7, 0x65, 0xbe, 0x79, 0x47, 0x86, 0xa4, 0x92, 0xee, 0xa1, 0x30, 0x0b, 0xc9, 0x4b, 0xe0, 0x7f,
	0xeb, 0x21, 0xb9, 0x93, 0x33, 0x59, 0x86, 0x72, 0x27, 0xb6, 0xdb, 0xd4, 0x77, 0x2f, 0x3c, 0x37,
	0xee, 0x98, 0xbf, 0x9d, 0x92, 0x09, 0xa1, 0x13, 0x37, 0x13, 0x19, 0x79, 0x15, 0x2a, 0xe7, 0x39,
	0xd0, 0xef, 0x24, 0xa8, 0x7c, 0xae, 0xa3, 0x56, 0x81, 0x5c, 0x78, 0x11, 0xeb, 0x32, 0xce, 0xed,
	0x5e, 0xe0, 0x32, 0x19, 0x50, 0xbf, 0x97, 0xd0, 0x5a, 0xa2, 0x3a, 0x08, 0x5c, 0x96, 0xc4, 0x5f,
	0x1e, 0x8e, 0xd1, 0xf2, 0xe1, 0x10, 0x38, 0x46, 0xcb, 0x1b, 0x30, 0x26, 0x8e, 0xc3, 0xfc, 0xa5,
	0xb8, 0xe4, 0xd2, 0xd0, 0xc4, 0xd7, 0x0c, 0x82, 0x78, 0xdf, 0x3f, 0x0d, 0x2c, 0x44, 0x92, 0x3a,
	0x94, 0x44, 0x26, 0xe5, 0x2c, 0x12, 0x49, 0xc6, 0xbc, 0x5b, 0x1f, 0x15, 0xfb, 0xd2, 0x44, 0xe4,
	0x61, 0xe2, 0x1d, 0x3a, 0xee, 0xa7, 0xba, 0xb7, 0x1e, 0x6a, 0xe8, 0x45, 0x28, 0xb5, 0x07, 0x21,
	0x55, 0xcb, 0x35, 0x17, 0xa5, 0xb3, 0x49, 0x91, 0x58, 0x66, 0xe6, 0x6c, 0x3a, 0xec, 0x67, 0xba,
	0xb3, 0x35, 0x33, 0x70, 0x13, 0x0c, 0x9f, 0xc5, 0x17, 0x41, 0x74, 0xc6, 0xcd, 0x5f, 0x19, 0xe8,
	0xf8, 0xaf, 0x5d, 0x1f, 0x7a, 0x87, 0x12, 0x6e, 0xa5, 0x76, 0xe4, 0x3e, 0x54, 0xd5, 0xfa, 0x13,
	0xa6, 0x5f, 0xcb, 0xd9, 0x2a, 0x72, 0xf1, 0x09, 0x6e, 0x09, 0xca, 0x0a, 0x91, 0x2b, 0x42, 0x4a,
	0x86, 0x65, 0x25, 0x8d, 0xdc, 0x1c, 0xf0, 0x4f, 0x7a, 0xee, 0x3a, 0xd4, 0xe0, 0xaf, 0x43, 0x2d,
	0x01, 0x8a, 0x1d, 0x5d, 0x04, 0x91, 0x8b, 0x15, 0x6b, 0xd2, 0x9a, 0x52, 0xf2, 0x23, 0x25, 0x26,
	0x9b, 0x70, 0x33, 0xcf, 0x9c, 0x1a, 0x7c, 0x24, 0xd9, 0x67, 0x75, 0xf6, 0xd4, 0xec, 0x16, 0x18,
	0x5d, 0xea, 0xdb, 0x5e, 0x78, 0xfe, 0xc8, 0x1c, 0x47, 0xe6, 0x62, 0x97, 0xfa, 0xfb, 0xe1, 0xf9,
	0x23, 0xb2, 0x0e, 0xb3, 0x89, 0xca, 0xe6, 0xfd, 0xb6, 0xcf, 0x62, 0xbb, 0x47, 0xf9, 0x99, 0x39,
	0x81, 0xb0, 0x69, 0x05, 0x6b, 0xa1, 0xe6, 0x80, 0xf2, 0x33, 0xf2, 0x04, 0x2a, 0x58, 0xfc, 0x39,
	0x73, 0xfa, 0x91, 0x17, 0x0f, 0x4c, 0xc0, 0xe2, 0x79, 0xff, 0xfa, 0xf3, 0x6e, 0x29, 0xb4, 0x55,
	0x16, 0xc6, 0xc9, 0x88, 0xac, 0xc3, 0x8c, 0xdc, 0x4f, 0x9e, 0xf2, 0x13, 0xb9, 0x19, 0xe9, 0x01,
	0x27, 0xba, 0xc1, 0x03, 0x98, 0xd6, 0x0f, 0x55, 0xfa, 0x79, 0x29, 0x77, 0x58, 0xe2, 0x4c, 0xd1,
	0xcb, 0xdf, 0x82, 0xf9, 0xab, 0xd7, 0x20, 0x2d, 0x3e, 0x1d, 0x72, 0x5a, 0xa9, 0xdd, 0x3d, 0xa8,
	0xa8, 0xc4, 0xab, 0x8a, 0xe8, 0x9f, 0x25, 0xba, 0x24, 0x73, 0xae, 0x2c, 0xa5, 0x39, 0x90, 0x28,
	0xa8, 0x7f, 0xb9, 0x04, 0x12, 0x65, 0xb5, 0x0e, 0x65, 0xa5, 0x96, 0xf1, 0x5b, 0xc5, 0x85, 0x82,
	0x2c, 0xba, 0x18, 0xb8, 0x69, 0xbf, 0x92, 0xc3, 0xfd, 0xb5, 0xa8, 0xf9, 0xf9, 0x41, 0x86, 0xd6,
	0xf8, 0x70, 0x1b, 0x53, 0x3a, 0xdf, 0xe6, 0x50, 0x3e, 0xc4, 0xfd, 0xed, 0x2a, 0xdf, 0xa6, 0xaa,
	0xc3, 0x49, 0x72, 0xc3, 0x79, 0xa7, 0xe5, 0x16, 0x94, 0x2c, 0x5f, 0xd9, 0x73, 0xc0, 0x7f, 0x14,
	0xf3, 0x1d, 0x55, 0x0a, 0xd7, 0x18, 0x71, 0x66, 0x92, 0x63, 0xdc, 0x1c, 0xca, 0x88, 0xc0, 0xe7,
	0x43, 0x18, 0x11, 0xfe, 0x08, 0x66, 0x4f, 0xa9, 0x13, 0x07, 0xd1, 0xc0, 0x8e, 0x18, 0x67, 0xb1,
	0x1d, 0x7b, 0xce, 0x19, 0x8b, 0x4c, 0x11, 0x9c, 0x15, 0xac, 0xc5, 0x44, 0xe9, 0x2d, 0xa1, 0x3e,
	0x46, 0x2d, 0x79, 0x1d, 0xaa, 0x58, 0x36, 0xfb, 0x21, 0x8f, 0x23, 0x46, 0x7b, 0xdc, 0xbc, 0x25,
	0x52, 0x16, 0xe2, 0x2b, 0x42, 0xf3, 0x2c, 0x51, 0x90, 0xcd, 0x24, 0xcf, 0x5f, 0x32, 0xf8, 0x91,
	0x91, 0x56, 0x7b, 0x92, 0x56, 0xdb, 0xcc, 0xec, 0x73, 0x50, 0x89, 0xa3, 0x3e, 0x8f, 0x99, 0x6b,
	0x87, 0x4c, 0xe4, 0xba, 0xdb, 0xe9, 0x04, 0x65, 0xa5, 0x38, 0x12, 0x72, 0xd2, 0x48, 0x7c, 0x3c,
	0x0f, 0xff, 0x71, 0x46, 0x2f, 0xfd, 0xfc, 0x58, 0x37, 0x5a, 0x85, 0x9a, 0xeb, 0xf1, 0xbc, 0xc5,
	0x2b, 0xe9, 0x04, 0x53, 0x99, 0x4e, 0xc2, 0xdf, 0x4e, 0xf2, 0xc2, 0x15, 0xa3, 0x9f, 0x64, 0xd3,
	0xcc, 0x26, 0x67, 0x9b, 0x33, 0x7d, 0x00, 0xd3, 0xaa, 0xbc, 0x46, 0xac, 0x17, 0xc4, 0xcc, 0xe6,
	0xbc, 0x63, 0x2e, 0x4b, 0x7f, 0x91, 0x0a, 0x0b, 0xe5, 0x2d, 0xde, 0xc9, 0x22, 0xea, 0xaa, 0xc5,
	0x07, 0x86, 0x16, 0x51, 0xbb, 0x97, 0xec, 0x1a, 0x70, 0xb3, 0x4b, 0x79, 0xac, 0xe1, 0x6d, 0xea,
	0x38, 0x8c, 0x73, 0xf3, 0x5e, 0xbd, 0xb0, 0x32, 0x6a, 0xcd, 0x08, 0x6d, 0x0a, 0xdf, 0x42, 0xd5,
	0xc2, 0x37, 0xa1, 0x9a, 0x6f, 0xd1, 0x48, 0x0d, 0x46, 0xcf, 0xd8, 0x40, 0x65, 0x5c, 0xf1, 0x49,
	0xde, 0x84, 0xf1, 0x73, 0xda, 0xed, 0xcb, 0x0e, 0xff, 0x25, 0x1d, 0xbc, 0x44, 0x7e, 0x69, 0xe4,
	0x8b, 0x85, 0x85, 0x6f, 0x43, 0xed, 0x72, 0xef, 0x35, 0x84, 0xbc, 0xa1, 0x93, 0x97, 0x36, 0xee,
	0xbc, 0x80, 0x5c, 0xb2, 0xe8, 0xf4, 0xff, 0x1d, 0x87, 0xa9, 0x26, 0xe5, 0x9e, 0xd3, 0x62, 0x91,
	0x80, 0xb5, 0x58, 0x4c, 0xa6, 0x61, 0xb4, 0xef, 0xb9, 0xe6, 0x1f, 0x8b, 0x92, 0xbf, 0xef, 0xb9,
	0xa2, 0x5b, 0x50, 0x2d, 0x6e, 0x24, 0x7a, 0xa6, 0xa4, 0x40, 0xc8, 0x0c, 0xb2, 0x8d, 0xb2, 0x0c,
	0xe3, 0x32, 0x7c, 0x0f, 0x7c, 0xa4, 0x63, 0x76, 0x50, 0x46, 0xe6, 0x60, 0xbc, 0xcd, 0xb9, 0xe7,
	0x9a, 0x1f, 0x4b, 0x72, 0x39, 0x22, 0x33, 0x30, 0x86, 0xd2, 0x4f, 0xa5, 0x14, 0x07, 0xe4, 0x2e,
	0x80, 0x7a, 0x67, 0x08, 0x95, 0x4a, 0x6c, 0x93, 0xf2, 0x75, 0x21, 0xf4, 0x5f, 0x86, 0x49, 0xd1,
	0xeb, 0xda, 0x41, 0xc8, 0x7c, 0xd9, 0xbe, 0x0c, 0x6f, 0x0f, 0xc4, 0x89, 0x3e, 0x0d, 0x99, 0xbf,
	0x77, 0xc3, 0x32, 0xa8, 0xfa, 0x4e, 0x8d, 0x2f, 0x42, 0xba, 0x21, 0xdb, 0x9a, 0x17, 0x1b, 0x9f,
	0x84, 0x74, 0x23, 0x31, 0x16, 0xdf, 0xba, 0x71, 0x43, 0x36, 0x3a, 0xd7, 0x1a, 0x37, 0x34, 0xe3,
	0x06, 0xd9, 0x83, 0x6a, 0x3a, 0xb3, 0x64, 0xf8, 0x50, 0x32, 0x2c, 0x5e, 0x33, 0xbd, 0x62, 0x29,
	0x53, 0x6d, 0x4c, 0xb6, 0xa0, 0x84, 0x4c, 0x11, 0x75, 0xbd, 0x3e, 0x37, 0xff, 0x30, 0xf5, 0xc2,
	0xbb, 0x47, 0xa7, 0x42, 0xd4, 0xde, 0x0d, 0x0b, 0x68, 0x3a, 0xca, 0xce, 0x18, 0xdf, 0x96, 0xbf,
	0x99, 0xd2, 0xce, 0x58, 0xd8, 0x90, 0x2f, 0xc0, 0x98, 0xe8, 0xfe, 0x64, 0x12, 0xad, 0x6e, 0x2c,
	0x5f, 0x5f, 0x39, 0x45, 0x4f, 0x68, 0xa1, 0x41, 0x46, 0x8c, 0xe6, 0xcf, 0xf5, 0xcb, 0x13, 0x28,
	0x72, 0x0b, 0x8a, 0x2a, 0xa7, 0x26, 0x4f, 0xaf, 0x64, 0x2c, 0xba, 0xce, 0x5c, 0xd2, 0x4d, 0x5e,
	0x52, 0x65, 0x3d, 0xdf, 0x92, 0x79, 0x98, 0xc8, 0x37, 0xb9, 0x6a, 0x98, 0xb9, 0xa1, 0x52, 0xff,
	0x47, 0x77, 0x43, 0xd9, 0xfc, 0x36, 0x27, 0xe4, 0x63, 0x7a, 0xe1, 0xbb, 0x23, 0x50, 0x54, 0x25,
	0xf5, 0xb3, 0xf4, 0xfa, 0x19, 0x18, 0xc3, 0x7e, 0x46, 0x39, 0x3d, 0x0e, 0x44, 0x2b, 0x75, 0xa5,
	0x93, 0x51, 0xfe, 0x5f, 0xf5, 0xf2, 0x7d, 0xcc, 0xb7, 0x80, 0xb4, 0x45, 0x8c, 0xda, 0x5c, 0x06,
	0xa9, 0x78, 0x79, 0x73, 0x51, 0xc5, 0x45, 0xf7, 0xb8, 0xfa, 0xb2, 0x3b, 0xc9, 0x05, 0xb7, 0x55,
	0x6b, 0xe7, 0x05, 0x7c, 0xf9, 0x6d, 0x30, 0xd2, 0x9e, 0xa5, 0x04, 0xc5, 0x67, 0x87, 0x4f, 0x0e,
	0x9f, 0x9e, 0x1c, 0xd6, 0x6e, 0x10, 0x03, 0xc6, 0x4e, 0x8e, 0xb6, 0x36, 0x6a, 0x05, 0xf5, 0xd5,
	0xa8, 0x8d, 0x90, 0x32, 0x18, 0x42, 0x86, 0xa3, 0xd1, 0xe5, 0x37, 0x60, 0x0c, 0x6f, 0xb3, 0x0a,
	0x60, 0xbd, 0x63, 0x67, 0x96, 0x25, 0x28, 0x5a, 0xef, 0xd8, 0x1b, 0x5f, 0xdd, 0x7b, 0xb7, 0x36,
	0xa2, 0x06, 0x9b, 0x62, 0x30, 0xfe, 0x78, 0xcc, 0x18, 0xc3, 0xdf, 0x7a, 0x6d, 0xe9, 0xf1, 0x84,
	0xf1, 0x71, 0xb1, 0xf6, 0x49, 0xf1, 0xf1, 0x84, 0xf1, 0x73, 0xa3, 0xf6, 0x81, 0xb1, 0x0c, 0x60,
	0x24, 0xb1, 0xba, 0x7c, 0x5f, 0x7e, 0x63, 0xb8, 0x2d, 0x80, 0x91, 0xf6, 0x8e, 0x32, 0xe7, 0xa5,
	0x63, 0x0d, 0xd7, 0xb8, 0x16, 0xf7, 0x00, 0xca, 0x7a, 0x2c, 0x5d, 0x8b, 0x7d, 0x15, 0x20, 0x0b,
	0x18, 0x72, 0x13, 0x26, 0xe4, 0x4b, 0x40, 0xe1, 0xd4, 0xe8, 0x81, 0x0b, 0x46, 0x92, 0xaf, 0xc9,
	0x1c, 0x4c, 0x1f, 0xec, 0xb6, 0xf6, 0xec, 0xad, 0x67, 0xc7, 0x7b, 0xda, 0x31, 0x4c, 0x43, 0x25,
	0x13, 0x1f, 0xee, 0x9e, 0xd4, 0x0a, 0x79, 0xe4, 0xb1, 0xf5, 0xac, 0x75, 0xbc, 0xbb, 0x53, 0x1b,
	0x21, 0xf3, 0x30, 0xa3, 0x13, 0x24, 0x8a, 0xd1, 0xe6, 0xfc, 0xbb, 0x73, 0xf2, 0x8f, 0xa7, 0x35,
	0x27, 0xe8, 0x69, 0x7f, 0x3e, 0xb5, 0x27, 0xf0, 0x6f, 0xa7, 0xc6, 0xff, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xba, 0x8a, 0x4d, 0xdf, 0xf1, 0x12, 0x00, 0x00,
}
